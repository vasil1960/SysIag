/*
 * File: app/controller/Func.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('sysIag.controller.Func', {
    extend: 'Ext.app.Controller',
    alias: 'controller.func',

    config: {
    },

    loadStore: function(store) {
        Ext.Viewport.setMasked({xtype:'loadmask', message:'Зареждам ...', indicator:true });

        var store = Ext.getStore(store);

        store.setAutoLoad('false');

        store.clearFilter();

        store.load({
            callback: function(records, operation, success) {
                if(success)
                {
                    Ext.Viewport.setMasked(false);
                } else {
                    Ext.Viewport.setMasked(false);
                    Ext.Msg.alert('Събщение', 'Проверете връзката с интернет и рестартирайте приложението', Ext.emptyFn);
                }
            }
        });
    },

    searchOnNameAndFamilia: function(textfield, store, name, familia) {

        var value = textfield.getValue(),	// Search value
            store = Ext.getStore(store);	// People store

        // Clear current filter if less than 2
        if (value.length === 0) {
            store.clearFilter();
        }

        // Search term must be at least 2 characters
        if (value.length < 2) {
            return;
        }

        // Clear any current filters
        store.clearFilter();

        // Check if a value is provided
        if (value) {

            // Spit value to get multiple terms
            var terms = value.split(' ');

            // Convert each search string into regex
            var regexps = [];
            Ext.each(terms, function(term) {

                // Ensure term is not space and at least 2 characters
                if (term && term.length > 1) {
                    regexps.push(new RegExp(term, 'i')); // Case-insensitive regex
                }

            });

            // Filter records
            store.filter(function(record) {

                var matches = [];

                // Check each of the regular expressions
                Ext.each(regexps, function(regex) {

                    var match = record.get(name).match(regex) || record.get(familia).match(regex);
                    matches.push(match);

                });

                // If nothing was found, return false to not show
                if (regexps.length > 1 && matches.indexOf(false) != -1) {
                    return false;
                } else {
                    // Else return to show
                    return matches[0];
                }

            });
        }
    },

    callAndEmailFn: function(record) {

        Ext.Viewport.setMasked(false);

        var gsm = record.get('GSM'),
            email = record.get('Email'),
            fullname = record.get('Titla') + ' ' + record.get('Name') + ' ' + record.get('Familia'),
            pod = record.get('Podelenie'),
            dlagnost = record.get('Dlagnost'),
            EGN = record.get('EGN'),

            //без ЕГН
            text = '<P><small><i>' + dlagnost + '</i></small></p><p><small><i>' + pod + '</i></small></p><p><small><i>' + gsm + '</i></small></p><p><small><i>' + email + '</i></small></p>';

            // с ЕГН
            //text = '<P>ЕГН: ' + EGN + '</p><P>' + dlagnost + '</p><p>' + pod + '</p><p>' + gsm + '</p><p>' + email + '</p>';


        Ext.Msg.show({

            title: '<h1><b>'+fullname+'</b></h1>',
            message: this.changeMessageTextAndQuestion(gsm, email, text),
            width: 300,
            buttons:[
                { text: '<small>Избери</small>',    itemId: 'call', hidden: this.hideButton(gsm) },
                { text: '<small>Email</small>',  itemId: 'email', hidden: this.hideButton(email) },
                { text: '<small>Затвори</small>', itemId: 'cancel' }
            ],

            fn: function(buttonId) {

                if (buttonId == 'call'){
                    document.location.href = 'tel:'+record.get('GSM');
                    //document.open('tel:'+record.get('GSM'), '_system');
                } else if (buttonId == 'email'){
                    document.location.href = 'mailto:'+record.get('Email');
                } else if (buttonId == 'cancel'){
                    //console.log('cancel');
                } else {
                    alert('Има някакава грешка');
                }
            }
        });
    },

    changeMessageTextAndQuestion: function(gsm, email, text) {
        if (gsm === '') {
            return text + '<p><small><i>Няма въведен телефонен номер</i></small></p>';
        } else if ( (gsm === '') && (email === '')){
            return text + '<p><small><i>Няма въведени телефонен номер и имейл</i></small></p>';
        } else if ( (gsm !== '') && (email === '')){
            return text + '<p><small><i>Да избера ли номера ?</i></small></p>';
        } else if ( (gsm === '') && (email !== '')){
            return text + '</p><p><small><i>Няма въведен телефон номер.</i></small></p><p><small><i>Можете да изпратите само имейл</i></small></p>';
        }else if ( (gsm !== '') && (email !== '')){
            return text + '<p><small><i>Да избера ли номера или ще изпратите имейл ?</i></small></p>';
        } else {
            alert('Има някаква грешка');
        }
    },

    hideButton: function(param) {

        if (param === ''){
            return true;
        } else {
            return false;
        }
    },

    clearSearchField: function(store) {

        Ext.getStore(store).clearFilter();
    },

    searchByNumber: function(store, textfield) {
        var store = Ext.getStore(store),
            value = textfield.getValue();

        store.clearFilter();
        store.currentPage = 1;


        if (value.length === 0) {
            store.clearFilter();
        }

        if (value.length < 5) {
            return;
        }


        if(value){

            store.getProxy().setExtraParams({gsm:value});
        }

        store.load();
    },

    searchByName: function(store, textfield) {

        var store = Ext.getStore("searchByName"),
            value = textfield.getValue();

        store.clearFilter();
        store.currentPage = 1;


        if (value.length === 0) {
            store.clearFilter();
        }

        if (value.length < 3) {
            return;
        }


        if(value){


            var val = value.split(' ');

            if(val.length == 1){

                store.getProxy().setExtraParams({Ime:val[0]});

            }

            if(val.length == 2){

                store.getProxy().setExtraParams({Ime:val[0], Fam:val[1]});

            }

            console.log(val[0],val[1]);
        }


        store.load();

    }

});